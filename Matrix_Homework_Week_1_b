#include <iostream>
using namespace std;

class Matrix {
private:
    int rows, cols;
    int** data;  // Dynamic 2D array

public:
    Matrix(int r, int c) : rows(r), cols(c) {
        data = new int*[rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; j++)
                data[i][j] = 0;  // initialize to 0
        }
    }

    
    ~Matrix() {
        for (int i = 0; i < rows; i++)
            delete[] data[i];
        delete[] data;
    }

    Matrix(const Matrix& other) : rows(other.rows), cols(other.cols) {
        data = new int*[rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; j++)
                data[i][j] = other.data[i][j];
        }
    }

    void input() {
        cout << "Enter elements of a " << rows << "x" << cols << " matrix:\n";
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                cin >> data[i][j];
    }

    void display() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++)
                cout << data[i][j] << " ";
            cout << endl;
        }
    }

    Matrix add(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            throw runtime_error("Matrix dimensions do not match for addition.");
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                result.data[i][j] = data[i][j] + other.data[i][j];
        return result;
    }

    // Matrix Transpose
    Matrix transpose() const {
        Matrix result(cols, rows);
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                result.data[j][i] = data[i][j];
        return result;
    }
};


int main() {
    int r, c;
    cout << "Enter rows and columns of matrices: ";
    cin >> r >> c;

    Matrix m1(r, c), m2(r, c);

    cout << "\nMatrix 1:\n";
    m1.input();
    cout << "\nMatrix 2:\n";
    m2.input();

    cout << "\nMatrix 1:\n"; m1.display();
    cout << "\nMatrix 2:\n"; m2.display();

    try {
        Matrix sum = m1.add(m2);
        cout << "\nMatrix Addition Result:\n";
        sum.display();
    } catch (runtime_error& e) {
        cout << e.what() << endl;
    }

    cout << "\nTranspose of Matrix 1:\n";
    Matrix t1 = m1.transpose();
    t1.display();

    cout << "\nTranspose of Matrix 2:\n";
    Matrix t2 = m2.transpose();
    t2.display();

    return 0;
}
